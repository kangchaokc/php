函数的规则:
		函数名称以字母或下划线开头
		【不能以数字开头】
		函数名对大小写不敏感


函数定义:
	提示:函数名能反映函数的功能
		函数本身不执行	需要调用
		function 函数名(){
		有效代码段;
		return//返回值   也可以不写,不写则返回null		相当于这个函数最后一行代码,在这个函数return后面代码无效
		}



函数参数种类:
	形参:由0个或多个组成,	占位用没有具体值	接收实参用的
	实参:由0个或者多个组成	
		
		function 函数名($形参1,$形参2,$形参3){
				echo  $变量(形参)1;
				echo  $变量(形参)2,$变量(形参)3;
		}
		函数名($实参1,$实参2,$实参3);
		
	注意:
		实参>=形参	否则出现错误
		第一个形参接收第一个实参	按顺序的
		
	
		1):按值传递
			改变形参不会改变实际参数的值
				function name($i){
						++$i;
						echo $i;
				}
				$a=1;
				name($a);//2
				echo "<br>" . $a;//1
				
				
		2):引用传递
			改变形参会改变实际参数(跟变量引用赋值只是有关)
				function name2(&$i){
						++$i;
						echo $i;
				
				}
				$a=1;
				name2($a);//2
				echo $a;//2
		3):形参默认值
			函数如果有默认值,没接到实参的值,则会输出默认值	例如:
			function ceshi($name=20){
							echo $name;//20
				}
				ceshi();//20
				
				
				function ceshi($name=20){
							echo $name;//60
				}
				ceshi(60);//60
			注意:
			传参数是从左往右传的
				正确传法
				function ceshi($b,$a=20){
						echo $a+$b;
				}
				ceshi(20);
				
				这种报错
				function ceshi($a=20,$b){
						echo $a+$b;
				}
				ceshi( ,20);
				
				
		4):可变长度参数列表
			PHP内置	直接使用的
			func_get_args()获取参数 返回数组array
			func_get_arg()必须有一个参数 ,实参的索引值 ,这返回索引位置的类型值	大于实参的索引值会出现警告 并返回Boolean false
			func_num_args()返回实参传递的个数
			可以使用在我们自定义函数里面,能够还回一些关于参数的信息	
			
		function demo(){
			var_dump(func_get_args());返回一个数组
			var_dump(func_get_args(0));
		}
		demo(3,5,76,3,"446","dsgsdg");


可变函数:
	可变函数不能用于例如 echo,print,unset(),isset(),empty(),include,require 以及类似的语言结构
		function demo(){
			echo "我是一个函数";
		}
		$name="demo";
		$name();
		
递归函数:
	注意:在内部调用的时候一定得有条件是跳出这个调用   否则一直调用死循环
		在函数内部自己调用自己
		function demo($i){
			echo $i . "a";
			if($i>0){
				demo(n-1);//每次调用开辟新空间执行这个函数          执行完成后返回参数在执行上一个函数的下语句 传入实参3 大于0 会调用3次
													里面的局部变量互不影响(不是引用)
			}else{
				echo "我是你大爷";
			}
			echo $i . "b";
		
		}
			demo(3);
			
		整体输出结果是   3a2a1a0a我是你大爷0b1b2b3b
	
内置函数:
	PHP 有很多标准的函数和结构。还有一些函数需要和特定地 PHP 扩展模块一起编译，
	否则在使用它们的时候就会得到一个致命的“未定义函数”错误
	要使用 mysql_connect() 函数，就需要在编译 PHP 的时候加上 MySQL 支持


