++++++++++++++++++数组+++++++++++++++++++++++++++

数组定义:数据的集合,可以放任意数据
	第一种:
		指定整型索引数组:
			$i[2]=3454;
			$i[1]="3454";
			$i[3]="数组";
			//i[2]="覆盖前面的[2]"; 
			var_dump($i);//这种创建方法里面只有3个值  也只有3个索引值 
							像索引值0没创建相当于不存在,只会输出对应索引的值
	第一种的简写:
		$i=array(索引值=>值,....,索引值=>值);
		
	
	第二种:
		默认整型索引数组:
			$i[]=4444;
			$i[]="3454";
			$i[]="数组";
			var_dump($i);//自动从上往下设置索引值0~2
	
	第二种简写:
			$i=array(4444,"ddsf";"1111")
			
	
	第三种:
		关联数组:
			$i=array("name"=>"kc","age"=>18);
		注意:
			echo name;//报错	
			这样读取会自动转化成字符串输出了  未定义常量  常量是这样读取的
			echo $i[name];//报错		未定义常量
			echo $i["name"];//"kc"
		
	第四种:
		整型跟关联数组混合写:
			//这种值44的索引值根据前面最大的索引值来  所以44的索引是3
			$arrayb=array(2=>333,0=>"a",44,null);
			//7的索引值是333的索引来的   7索引是9
			(8=>333,0=>"a",44,55,1=>null,7)
			
查找数组里面的数组值:------------------------------------------
				$i=array(//数组里面放了一个或多个数组 
						//这数组也叫二维数组	属于整数跟字符串数组里面的
						18,
					3=>"20",
					"x"=>array(
						"name"=>"kc",
						"age"=>18,
							"ddd",
						"y"=>array(
								"s"=>9,
						),//这","要打
					),//","打
				);//表示$i数组的结束
				var_dump($i["x"]["y"]["s"]);//9		
	

unset() 函数允许删除数组中的某个键。但要注意数组将不会重建索引。---------------------
如果需要删除后重建索引,可以用 array_values()函数 重建的索引是整数的值从左到右
		//这是返回一个新数组      原来的数组不受影响
		例如:
			//这只能遍历你指定的数组  如果这个数组里面还有一个数组  不会操作这个数组里面的索引值
			$a = array(
				"class" => "php中文网",
				"name" => "西门",
				"job" => "讲师"
			);
			print_r(array_values($a));
			//Array ( [0] => php中文网 [1] => 西门 [2] => 讲师 )
			注意:
				var_dump($a);[class] => php中文网 [name] => 西门 [job] => 讲师
				$a索引是不变的
		
			$a = array(
					"job" => "讲师"
					"class" => "php中文网",
					"name" => "西门",	
				);
				print_r(array_values($a));
				//Array ([0] => 讲师  [1] => php中文网 [3] => 西门  )
				
			//	这个是操作数组里面那个数组的索引值
			$a = array(
				"class" => "php中文网",
				"name" => "西门",
				
				9=>[8,6,1,1,2=>2,],只会输出一个1是因为索引值2覆盖了前面索引值为2的
				"job" => "讲师",
			);
			//	这个是操作数组里面那个数组的索引值
			var_dump(array_values($a[9]));	
				
				
		
		
数组创建注意:---------------------------------------------------------
	如果在数组定义中多个单元都使用了同一个键名，则只使用了最后一个，之前的都被覆盖了
	自 5.4 起可以使用短数组定义语法，用 [] 替代 array()。
	键key可是是一个整数 integer或字符串 string =>  值(value)可以是任意类型的值
	用整形的是索引数组
		索引数组:索引值为整数	通过数字来查询数组里面的值
	用字符串的是关联数组
		关联数组:在数组里面给每一个值取个名字	通过名字来查数组里面的值
	
	
	包含有合法整型值的字符串会被转换为整型。
	例如:"7"被转成索引值7		但"7a"或者"a7"则不会  此时变成关联数组键了
	例如键名 "8" 实际会被储存为 8但是 "08" 则不会强制转换，因为其不是一个合法的十进制数值。
	浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。
	
	布尔值也会被转换成整型。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。
	
	Null 会被转换为空字符串，即键名 null 实际会被储存为 ""。
	
	数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。



遍历数组:
	用for循环:
		$arr=[1,32,5,7,9,3,4,];
		for($i=0;$i<count($arr);$i++{
				echo $arr[$i];
		}
		//先array_values()重建索引在count()返回值个数
		//$arr=[1,32,5,"dddd"=>"wwwww",7,9,3,4,];
		//$arr=$array_values($arr);
		//for($i=0;$i<count($arr);$i++{
		//	echo $arr[$i];
		//}

	用foreach:
	遍历的一维数组:
			规则:
			foreach(数组变量名	as	变量名1){
				echo	变量名1;
				echo 	变量名1随便取;
				echo	变量名1是正在访问的数组里面的值;
					
			}
				
			$arr=[1,32,5,7,9,3,4,];
			foreach($arr as $value){
						echo $value;
			}
				
			//如果想知道索引值或者同时知道用下面格式:
			
				foreach(数组变量名	as	变量名2 => 变量名1){
					echo	变量名1;
					echo 	变量名1随便取;
					echo	变量名1是数组里面的值;
					echo	变量名2是数组里面的索引;
				}
		
	遍历有规律的二维数或者多维数组:$arr里面全是数组
				$arr=[
				["a","b","c"],
				[1,2,3],
				[4,5,[9,10]],
			];
			foreach ($arr as $key => $value) {
				foreach ($value as $key1 => $value1) {
							var_dump($value1);
							
				}
			}
				$arr=[
				[["a"],["b"],["c"]],
				[[1],[2],[3]],
				[[6],[7],[9]],
				];
				foreach ($arr as $key => $value) {
					foreach ($value as $key1 => $value1) {								
						foreach ($value1 as $key2 => $value3) {
									var_dump($value3);
								
						}		
					}
				}
				

	以表格输出数组:
		$arr=[
			[1,"张三",true,18,],
			[2,"李四",true,20,],
			[3,"王五",false,17, ],
		
		];
		echo "<table border=1>";
			foreach ($arr as $key => $value) {
				//用来判断$balue是否等于true
				//PHPtrue在浏览器输出的是1	而false是不输出的
				if($value[2]===true){
				$value[2]='男';
				}else{
				$value[2]="女";
				}
				echo "
					<tr>
						<td>{$value[0]}</td>
						<td>{$value[1]}</td>				
						<td>{$value[2]}</td>
						<td>{$value[3]}</td>
					</tr>
					
				";
			}
		echo "<table>";


常用内置数组函数:
		//返回新的数组  原来的数组不会受影响
		//返回一个数组把原来的值做为键名,出现的次数作为值
		//【只能统计数字和字符串出现的次数】	null,false,[]....多不统计   报错
array_count_values();
			$tongji=[
					1,2,2,4,"hello","world",1,"hello",],
			];
					var_dump(array_count_values($tongji));
					
					
			//查找数组里面数组的值的次数
			$tongji=[
					1,2,2,4,"hello","world",1,"hello",[3,3,2,],
			];
					var_dump(array_count_values($tongji[8]));
					

array_key_exists();-----------------------------------------
			//查看该数组里面是否有这个键名,使用过为true 没试用过为false
			//只能查一维数组
			$tongji=[
					1,2,2,4,"hello","world",1,"kc"=>"hello",
			];	
			
			var_dump(array_key_exists("kc",$tongji));
			
array_search();----------------------------------------------------
			//查询这值是否在这个数组里面,存在返回这个键名跟类型,不存在返回Boolean false
			//从左往右查	里面有多个则返回最左边那个
			//只能查到一维数组
			$tongji=[
					1,2,2,4,"hello","world",1,"kc"=>"hello","15",
			];
			var_dump(arra_search("hello",$tongji));
			

			//第三个参数还会比较值得类型
			//true要检查值	和 值的类型
			var_dump(arra_search(15,$tongji,true));返回false
		
		注意:	
			//里面没有0值 则返回数字值个数-1的索引值	但指定键名的不做为返回
			//字符串数字也算
			var_dump(arra_search(0,$tongji));
			
in_array();------------------------------------------------------------
			//查询这值是否在这个数组里面
			//存在返回true		不存在返回false
			//第三个参数还会比较值得类型
			$tongji=[
					1,2,2,4,"hello","world",1,"kc"=>"hello","15",
			];
			var_dump(in_array(2,$tongji));
			
			
count()返回数组里面值的个数---------------------------------
		例如:
			$i=[1,3,6,"333","name"=>"kc"];
			echo count($i);//5
		
	也可以输出多维数组值个数
		例如:
			$i=[
				array(1,3,4),
				array(5,6,7),
			];
			//8个	2+6		2就是array()本身算一个数据
			echo count($i,1);第二个参数是返回数组里面数组的个数
							//一定要>=1	>1效果==1		写0报错
							
list();
		//把数组中的值赋给一组变量
		//这不是真正的函数，而是语言结构
		// list() 执行过程中修改数组（比如使用 list($a, $b) = $b）将会产生不可预知的结果
		//PHP 5 里，list() 从最右边的参数开始赋值； PHP 7 里，list() 从最左边的参数开始赋值						
		$i=[60,70,80];				
		list($a,$b,$c)=$i;
		echo $a;	
		
		
	// list() 不能对字符串起作用
	list($bar) = "abcde";
	var_dump($bar); // NULL		
			
	
asort();
		//从小到大排序一个数组		改变这个数组	
		成功返回true	否返回false
			
arsort();
		//从大到小排序一个数组		改变这个数组			
			
array_reverse()		
		//		不进行排序反序这个数组	
		
array_filter(数组名,"函数名");
		//	用函数来过滤数组中的值      
		//   函数返回true则创建新数组并且把这个值放到新数组里面	返回false则过滤掉	
		//	函数是自己写的						
					