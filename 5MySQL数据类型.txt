	
整数类型:	
		整数数据类型:			字节				有符号												无符号
		 tinyint(4)		 1			-128,127												 0,255                      
 		smallint(6)		 2			-32768,32767											 0,65535
 		mediumint(9)	 3			-8388608,8388607										 0,16777215 
 		int(11)			 4			-2147483648,2147483647									 0,4294967295
 		bigint(20)		 8			-9223372036854775808,9223372036854775807				 0,18446744073709551615
 		
 		
			 zerofill属性:		
								//()里面数字是显示的时候小于那个数字得位数就在前面加0补充4位,大于4位没影响		
									就算设了数字也没效果	要配合zerofill 才显示
								create table b1(int(5) zerofill)
				
			unsigned属性:		
								//用了无符号可以提高储存上限
					 			 正常的值下线为0,上限是有符号的2倍
					 			 如果有一个列指定为zerofill	则自动添加unsigned
					 			 也可以单独加
								int(6) unsigned(无符号,+,-,) zerofill
			 		
			auto_increment属性
								   		
						注意:
							不能单独存在
								//这样写必须ID已经添加了主键	
								alter table b1 modify id int auto_increment;
								//同时添加
							create table b2(id int auto_increment,name int, primary key(id));
									一个表中只能有一个auto_increment属性
			 					// 在需要产生唯一标识符或顺序值 
			 						一般从1开始，每行加1，只能用于整数类型
			 						配合主键使用	
			 					添加:
			 						不能用添加字段来添加	，只能用修改字段来添加	
			 					//删除:
			 						不能用删除语句删除这属性 		只能用用修改字段的方法	   
			 						alter table b1 modify id int;
			
				primary key主键设置	
							注意:			添加了用修改语句修改不了  			只能用删除字段语句删除
								可以单独存在			
									 主键最好不要设置在实际信息的字段上       主键应该唯一
									 主键要设置在整数类型字段上
									主键必须不同, 主键不能为null
									 配合auto_iincement使用
									 一个表只能有一个主键	
									//指定
										create table b2(id int ,name int, primary key(id));	
										create table b2(id int primary key,name int);
									
									//添加
										可以用增加字段来添加
										alter table 表名 add primary key (字段名);	
									//删除
										不能用修改字段来删除	只能用删除字段删除
										alter table 表名 drop primary key
										如果字段具有 auto_increment属性必须先删除auto_increment属性
									
			规定字段值是否可以为null 
					格式:	alter table	b1 modify id int no null;
					
					
					默认为空	not null既不可以为空    该属性可以用于其他字段类
							 设置默认值      default值       该属性也可以用于其她类型字段
									
			
浮点数据类型:--------------------------------------------------------------------------------------------

		单精度:float		精确到7位左右(整数加上小数)	设置了decimal(,)超过了就会报错	默认超过了不会        但会丢失精度
		双精度:double		精确到15位左右(整数加上小数)	
		定点 :decimal	:	
					是以字符串形式存储的
				默认:
					是decimal(10,0)
					decimal(7,2)	7是(整数加上小数)	2是(小数2位)
	
	

日期类型:------------------------------------------------------------------------------------------
		date			日期
		datetime		日期＋时间
			insert	into b1 values(now());用now函数获取当前数据库所在电脑时间
		timestamp		时间戳	
		time			时间
		Year			年
		
字符串类型:---------------------------------------------------------------------------------------------
							
							类型										长度
							char(m)									0,255	
							varchar(m)								0,65535
							tinytext								0,255
							text									0,65535
							mediumtext								0,16777215
							longtext								0,4294967295
							
							
					//m指定存几个字符	存中文出错是字符集的原因	要转utf8			default charset=utf8;	
				注意:
					varchar实际有损耗	只能存储65532个字节		
						比如：
							里面放字母			一个字母占一个字节 	   可以指定(m)为65532个字符
							
							里面放一个中文字	一个中文字占3个字节		那就不能指定65532字符	得65532/3才是能存的字符个数	
								注意的是不同的字符集表一个中文占的字节是不同的比如utf8占3个   而gbk就只占2个      所以指定的时候还得看是什么字符集
									也不需要特意的记住:超过了会自动转成够存储字符的类型	
									
									
				char 跟	varchar	的区别:
					1)	char类型字符所占的存储空间是固定的，不光你用的时候存了几个字符,它所占的空间多是你当初设定的字符空间
							比如char(255)哪怕你只存一个"a",那它也占255个祝福长度的空间
						
						varchar所占的存储空间是固定的;根据存入的字符长度来确定实际占多少空间;
							与字符集有关 		varchar字节的解释在前面
						varchar(255)实际所占的空间就是存入字符长度+1个字节;
						varchar(超过255)实际所占的空间就是存入字符长度+2个字节;	节省空间	
						
					2)在检索的时候,char山除尾部的空格		而varchar会保留这些空格	
						用concat()这个关键字查询:
								select concat(字段的名,"+"),concat(字段名2,"+") from 表名;
								表1
								id		char(5)				里面放了"ab  "	//ab2个空格
								age		varchar(5)			里面放了"ab  "	//ab2个空格
								
							查询的时候select concat(id,"+"),concat(age,"+") from 表1;
								显示的结果是:
										char:ab+			虽然只放了4个字符     但会自动加空格来沾满指定的5个字符空间	
										varchar:ab  +		而varchar不会自动补充		ab2个字节2个空格2个字节	再加上指定(255)的一个字节
								
							char处理速度比barchar快	但浪费空间			
							所以char比较实用与存储固定的值(比如手机号码固定11位,指定(11)就不会浪费空间)
							
		特殊类型:enum()枚举类型:
							create table b1(字段名 enum("nan","nv"))
							插入的时候只能插入这2种值
								insert into 表1 values("nan");
								insert into 表1 values("nv");
								
						对1,255个成员需要1个字节存储;255,65535需要2个	最多65535
					
					insert into 表1 vbalues("nan"),("nan"),("nv");
					往enum类型存储忽略大小写	对于插入不在enum指定范围内的值	有可能存储了    但没有值		也有可能插入了enum的第一个值
					只允许从集合选取单个值		而不能一次取多个值
				
			set类型:
					0,64个成员		根据成员不同	存储上也有不同
					1,8				占1个字节
					9,16			占2
					17,24			占3
					25,32			占4
					33,64			占8
					set类型可以从允许之歌中选去任意1个或者多个元素组合	所以对于输出的值只要在允许的组合范围内   多可以存进set类型里面
					对于超过允许值范围的值  	将不允许存入		对于包含重复的集合将只取一次注入
					create	table b1(字段名	set("a","b","c",'d'))
					insert into b1 values("a,b",),("a,d,a")
					使用FIND_IN_SET函数最set类型的数据进行查询比较好
					
where FIND_IN_SET("nan","xingming");根据字段性别里面的"nan"值来查询字段"xingming"里面的值
