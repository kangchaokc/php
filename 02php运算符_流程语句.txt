运算符:
	基本运算符:
		+(加)	-(减)	*(乘)	/(除)除数不能为0		%(取余数)		.(字符串连接符)	
		注意:
			字符串里面有数字跟数字做加法
				数字得在其他字符最前面否则加不了			
		
		
		++(自增)		--(自减)	(对于变量的操作)
		//先自增,在返回这个变量的值
		++$a
	
		$a=2;
		$b=++$a;
		echo $b;//3
		
		
		//先返回变量的值,在自增	
		$a++
		
		$a=2;
		$b=$a++;
		echo $b;//2
		
		//这种不需要用到变量的值时候,结果是相同的,因为还没用到自增变量的值的时候
		$a=2;
		$a++;(--$a)这一行不需要用到值		相当于没用到这个变量
		echo $a;//3
		
		$a=2;
		echo $a++;//2	这一行要用到值	
		
	赋值运算符:
		=	+=	-=	*=	/=	%=	.=
		
	比较运算符:
		
		运算符	名称				例子				结果						
		==		等于				$x == $y		如果 $x 等于 $y则返回 true
		===		全等（完全相同）		$x === $y		如果 $x 等于 $y(且)它们类型相同，则返回 true
		!=		不等于			$x != $y		如果 $x 不等于 $y则返回 true
		<>		不等于			$x <> $y		如果 $x 不等于 $y则返回 true
		!==		不全等（完全不同）	$x !== $y		如果 $x 不等于 $y(或)它们类型不相同，则返回 true
		>		大于				$x > $y			如果 $x 大于 $y，则返回 true
		<		小于				$x < $y			如果 $x 小于 $y，则返回 true
		>=		大于或等于			$x >= $y		如果 $x 大于或者等于 $y，则返回 true
		<=		小于或等于			$x <= $y		如果 $x 小于或者等于 $y，则返回 true
		
	逻辑运算符:
		注意:短路运算的优先级问题!
		对程序本身没影响,对资源有影响,多一次判断
		&& 如果左边为true在来判断右边是否为true	左边为false  右边就不判断了	只要有一个为false就为false
		|| 如果左边为true	右边不执行	因为||只要一个为true结果就为true
		
		$a=true;
		$b=1;
		$a && ++$b	;
		echo $b;//2
		
		$a=false;
		$b=1;
		$a && ++$b	;
		echo $b;//1
		
		运算符	名称		例子			结果	
		and		与		$x and $y	如果 $x 和 $y 都为 true，则返回 true
		or		或		$x or $y	如果 $x 和 $y (至少有)一个为 true，则返回 true
		xor		异或		$x xor $y	如果 $x 和 $y (有且仅有)一个为 true，则返回 true
		&&		与		$x && $y	如果 $x 和 $y 都为 true，则返回 true
		||		或		$x || $y	如果 $x 和 $y 至少有一个为 true，则返回 true
		!		非		!$x			如果 $x 不为 true，则返回 true
		
	数组运算符:
	
		运算符	名称		例子			结果	显示结果
		+		联合		$x + $y		$x 和 $y 的联合（但不覆盖重复的键）
		==		相等		$x == $y	如果 $x 和 $y 拥有相同的键/值对，则返回 true
		===		全等		$x === $y	如果 $x 和 $y 拥有相同的键/值对，且顺序相同类型相同，则返回 true
		!=		不相等	$x != $y	如果 $x 不等于 $y，则返回 true
		<>		不相等	$x <> $y	如果 $x 不等于 $y，则返回 true
		!==		不全等	$x !== $y	如果 $x 与 $y 完全不同，则返回 true
		
		
	
	组合比较符(PHP7+)
		PHP7+ 支持组合比较符（combined comparison operator）也称之为太空船操作符
		符号为 <=>。组合比较运算符可以轻松实现两个变量的比较，当然不仅限于数值类数据的比较。
			$c = $a <=> $b;
			如果 $a > $b, 则 $c 的值为 1。
			如果 $a == $b, 则 $c 的值为 0。
			如果 $a < $b, 则 $c 的值为 -1。
			
			
			
	位运算符:
		把操作数转成二进制进行运算
		
	
	三元运算符:
		格式:	表达式1 ? 表达式2 : 表达式3
			表达式1true执行表达式2		false执行表达式3
			
	系统命令运算符:
		注意:是反引号
		格式:	`系统命令`
		不能夸平台 不同的操作系统命令不同	
	
	消除提示运算符:
			格式:echo @$a;
			
		=>
		->
		instanceof
		
		
	运算符的优先级:
		结合方向	运算符														附加信息
		无		clone new													clone 和 new
		左		[															array()
		右		++ -- ~ (int) (float) (string) (array) (object) (bool) @	类型和递增／递减
		无		instanceof													类型
		右		!															逻辑运算符
		左		* / %														算术运算符
		左		+ – .														算术运算符和字符串运算符
		左		<< >>														位运算符
		无		== != === !== <>											比较运算符
		左		&															位运算符和引用
		左		^															位运算符
		左		|															位运算符
		左		&&															逻辑运算符
		左		||															逻辑运算符
		左		? :															三元运算符
		右		= += -= *= /= .= %= &= |= ^= <<= >>= =>						赋值运算符
		左		and															逻辑运算符
		左		xor															逻辑运算符
		左		or															逻辑运算符
		左		,															多处用到
		运算符优先级中，or 和 ||，&& 和 and 都是逻辑运算符，效果一样，但是其优先级却不一样。
			
		

流程语句:【】【】【】【】【】【】【】【】【】【】【】【】【】【】【】【】【】【】【】【】
	以下值被认为是FALSE:
		注意:在做判断的时候空数组[]是不等于0	"0"	"0.0"	""	" "
								等于[]	false	null
			布尔值 FALSE
			整型值 0
			浮点型值 0.0
			空白字符串和字符串 “0”
			没有成员变量的数组
			特殊类型的NULL

顺序结构:从上往下


分支结构:

	第一大类if...else
				if语句可以嵌套
				if(){
					if(){}
				}
			第一种:
				if(表达式){
					true输出代码段1;
				}//false不输出
				
			第二种:	
				if(表达式){
					表达式为true输出代码段1;		
				}else{
					表达式为false输出代码段2;		
				}
			第三种:
				if(表达式){				
						true执行代码段1;
				}else if(表达式2){
						true执行代码段2;
				}else if(表达式3){
						true执行代码段3;
				}else{
					全部为false执行代码段4;		
				}
			
	第二大类:switch========================================
			
			switch(表达式){
					case 1://相当于==
						true输出代码段1;
						break;
					case 2:		//":"相当于"{"
						true输出代码段2;
						break;	//break相当于"}"
					default:
						false输出代码段3;
			
			}
			注意:表达式最好是数字后者字符串
				case为true里面没有输出语句而且没有break  会输出下一个case里面的代码段
			例如:
			case 1:
			case 2:
				代码段2;
				braek;
			
循环语句:
	注意:
		循环语句一定要有跳出的判断,否则死循环
				
	第一大类:================================================
		while(表达式){
		表达式为true则循环  为false时跳出循环
		}
		例如:
			这涉及到变量自增的知识点
			$a=0;
			while($a<10){
			echo $a;
			//每次判断多是$a<10,每次输出0;
			//这时候加个$a++,echo $a;	0	1	2	3	4	5	6	7	8	9	10不小于10为false跳出循环
			}
			
			$a=0;
			while($a<10){
				$a++;
				echo $a;
			//这会输出1,2,3,4,5,6,7,8,9,10
			//因为第一次判断$a<10,应该输出0,但是下面$a++自增,所以输出1
			}
			
			$a=0;
			while($a<10){
			echo $a;
			$a++;
			//第一次判断$a<10,输出0;然后自增返回表达式判断为true继续循环输出$a,直到自增返回判断为false跳出循环
			}
			
		do.....while
				do{
					各种语句;
				}while(表达式);
			例如:
				$a=0;
				do{
				echo $a;
				$++;
				}while($a<10);
		
	第二大类:	
		for(表达式1;表达式2,;表达式3){
				各种语句;
		}
		注意:表达式2不能出现		变量1<变量<变量2	这样的表达式        要用   变量1<变量 && 变量<变量2
		表达式1一般放初始化变量,可以多个用","隔开
		表达式2一般放为true,false的判断语句,可以放多个用","隔开
		表达式3一般放变量的自增语句,可以放多个用哪个","隔开
		
	第三大类
		特殊的流程控制语句:
			break//跳出整个循环,用在循环里面
				 for($i=0;$i<10;$i++){
				 		if($i==5){
				 		break;
				 		}
				 echo $i;//1,2,3,4
				 }
				-----------------------------
				for($i=0;$i<10;$i++){
				 		if($i==5){
				 		echo $i;//5
				 		break;
				 		}
				 echo $i;//1,2,3,4
				 }
				 ------------------------------
				for($i=0;$i<10;$i++){
				 		
				 echo $i;//1,2,3,4,5
				 if($i==5){
				 		break;
				 		}
				}
				
			continue//跳出当前这次循环
			
				for($i=0;$i<10;$i++){
					 		if($i==5){
					 		
					 		continue;
					 		}
					 echo $i;//1,2,3,4,6,7,8,9
				 }
				 

			exit()
				作用:结束整个PHP脚本语言
				里面可以放数据
				exit("程序结束");
				严格来说不是函数
				exit;
			
			die();作用跟exit()一样
					

  